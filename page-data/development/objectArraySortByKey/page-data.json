{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/objectArraySortByKey/","webpackCompilationHash":"1fe8c166a1002efcf8fa","result":{"data":{"site":{"siteMetadata":{"title":"Philographer.dev","author":"Philographer","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"yoohoogun114","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"84e58c4c-1595-5c9e-af55-f7734cd1bfdd","excerpt":"개요 개발하고 있는 Application에서 Object의 Array를 Key에 의해 정렬할 일이 생겼다.\nArray에 int나 string이 담겨 있을 때는, 그냥 sort() 메소드를 사용하면 되지만, Object가 들어있을 때는 조금 까다롭다. \n Array.sort() 함수 요즈음, Javascript에 대한 메소드를 검색하다보면, MDN(Mozilla Developer Network)에 있는 문서를 주로 보게 된다. 가장 깔끔한 형식이고, 예제도 무척이나 쉽다! sort…","html":"<h1 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>개발하고 있는 Application에서 <strong>Object의 Array를 Key에 의해 정렬</strong>할 일이 생겼다.\nArray에 int나 string이 담겨 있을 때는, 그냥 sort() 메소드를 사용하면 되지만, Object가 들어있을 때는 조금 까다롭다.\n<br/></p>\n<h1 id=\"arraysort-함수\"><a href=\"#arraysort-%ED%95%A8%EC%88%98\" aria-label=\"arraysort 함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.sort() 함수</h1>\n<p>요즈음, Javascript에 대한 메소드를 검색하다보면, <a href=\"%5BJavaScript%20%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C%20-%20JavaScript%20%7C%20MDN%5Dhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/\">MDN(Mozilla Developer Network)</a>에 있는 문서를 주로 보게 된다. 가장 깔끔한 형식이고, 예제도 무척이나 쉽다!</p>\n<p>sort() 메소드는 누구나 알고 있겠지만 <strong>배열</strong>의 요소를 정렬하고 <strong>배열</strong>을 반환한다.\n(String의 정렬 순서는 유니코드 순서에 따른다. 주의할 점은 유니코드에서 숫자는 대문자 앞에 온다는 점이다.)\n<br/></p>\n<h1 id=\"arraysort-함수의-파라미터\"><a href=\"#arraysort-%ED%95%A8%EC%88%98%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"arraysort 함수의 파라미터 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.sort() 함수의 파라미터</h1>\n<p><U>재미있는 점은 sort 함수의 파라미터는 2가지가 있다.</U></p>\n<ol>\n<li>arr.sort()</li>\n<li>arr.sort(compareFunction(a,b))  //인자 2개를 받는 함수.</li>\n</ol>\n<p>그동안 파라미터가 없이는 자주 사용했지만, 파라미터에 무언가를 담지는 않았다.</p>\n<p>파라미터를 담아서는 어떻게 사용할까? </p>\n<p><U>compareFunction은 인자 2개를 받아서 사용한다.</U></p>\n<p>예를들자면, 다음과 같이 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> unSortedObjArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nunSortedObjArr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이 부분!</span></code></pre></div>\n<p>재미있는 점은, <strong>compareFunction의 반환 값</strong>에 따라 요소를 정렬한다는 점이다.</p>\n<ol>\n<li>반환 값이 <strong>0보다 작으면</strong> a를 b보다 먼저 정렬한다. (a가 b 앞에 온다는 말이다.)</li>\n<li>반환 값이 <strong>0이면</strong> a와 b를 변경하지 않고 나머지 요소에 대하여 정렬한다 (정렬 x)</li>\n<li>반환 값이 <strong>0보다 크면</strong> b를 a보다 먼저 정렬한다. (b가 a 앞에 온다는 말이다.)</li>\n</ol>\n<p>자 이제 본래 의도였던, Object Array를 <strong>Value</strong>에 의해 정렬해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Edward'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Sharpe'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">37</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'And'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'The'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Magnetic'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Zeros'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">37</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sort by value</span>\nitems<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* [ { name: 'The', value: -12 },\n  { name: 'Edward', value: 21 },\n  { name: 'Sharpe', value: 37 },\n  { name: 'And', value: 45 },\n  { name: 'Magnetic' },\n  { name: 'Zeros', value: 37 } ] */</span></code></pre></div>\n<p>추가로 Object Array를 <strong>Key</strong>에 의해 정렬해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Edward'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">21</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Sharpe'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">37</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'And'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'The'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Magnetic'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Zeros'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">37</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sort by name(key)</span>\nitems<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> nameA <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ignore upper and lowercase</span>\n  <span class=\"token keyword\">var</span> nameB <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ignore upper and lowercase</span>\n  <span class=\"token keyword\">return</span> nameA <span class=\"token operator\">-</span> nameB<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* [ { name: 'Edward', value: 21 },\n  { name: 'Sharpe', value: 37 },\n  { name: 'And', value: 45 },\n  { name: 'The', value: -12 },\n  { name: 'Magnetic' },\n  { name: 'Zeros', value: 37 } ] */</span></code></pre></div>\n<br/>\n<h1 id=\"arraysort-함수의-알고리즘-및-내부\"><a href=\"#arraysort-%ED%95%A8%EC%88%98%EC%9D%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B0%8F-%EB%82%B4%EB%B6%80\" aria-label=\"arraysort 함수의 알고리즘 및 내부 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.sort() 함수의 알고리즘 및 내부</h1>\n<p>원하던 Object의 배열은 끝이 났지만, 한 번 더 깊이 들어가 보자.\nsort()함수는 어떤 정렬을 사용할까? Bubble sort? Merge sort?  Select sort?\n어떤 정렬인지 한번 내부를 보자.<del>예제를 써보고, 안 되면 구글링을 해보자</del></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> unSortedObjArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> sortedObjArr <span class=\"token operator\">=</span> unSortedObjArr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'========='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>c <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sortedObjArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*  \n4\n3\n=========\n4\n2\n=========\n3\n2\n=========\n4\n1\n=========\n3\n1\n=========\n2\n1\n=========\n*/</span></code></pre></div>\n<p>무언가 이상하다고 생각하지 않는가? 그냥 봐서는 어떤 정렬인지 모르겠다.</p>\n<p>Google에 검색해 보았다. (검색어: javascript sort function algorithm)\n<a href=\"http://stackoverflow.com/questions/234683/javascript-array-sort-implementation\">algorithm - Javascript Array.sort implementation? - Stack Overflow</a></p>\n<p><U>요약해 보자면,</U></p>\n<p>스택 오버플로는 선택된(첫 번째) 답글이 진리이지만, 답글보다 많이 vote를 받은 comment에 보면 이 답변은 선택되지 말았어야 했다고 적혀있다.\n다음 답글을 보니 첫 번째 답글보다 up vote가 많다. 뭔가 읽을 만 한가보다\n짧게 요약하자면 크롬이나 사파리에서 쓰는 <a href=\"http://zetawiki.com/wiki/%EC%9B%B9%ED%82%B7\">웹킷</a>에서는</p>\n<ol>\n<li>Number type에서는 quicksort를 사용</li>\n<li>String에서 가능하면 quicksort를, 불가능하면 mergesort를 사용</li>\n<li>다른 타입의 배열에서는 selection sort를 사용\n여담으로 string은 radix sort로 O(n)이 되는게 아닌가 싶지만, 이 알고리즘은 runtime 에서 더 복잡도가 높아진다고 한다. 그래서 ‘quick소트를 사용한 것이구나’를 알 수 있다.</li>\n</ol>\n<p>포스팅을 간단히 쓰려고 했는데 무척이나 길어지게 되었다.\n깊게 쓰려니 끝이 없는 것 같다! </p>","frontmatter":{"title":"Object Array를 key에 의해 정렬하기","date":"January 23, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/development/objectArraySortByKey/","previous":null,"next":{"fields":{"slug":"/development/gitignore/"},"frontmatter":{"title":"gitignore","categories":["Vcs","Git"]}}}}}