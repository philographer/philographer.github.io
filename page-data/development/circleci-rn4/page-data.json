{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/circleci-rn4/","webpackCompilationHash":"d0ec2237c89ec9a39516","result":{"data":{"site":{"siteMetadata":{"title":"Philographer.dev","author":"Philographer","siteUrl":"https://philographer.github.io","comment":{"disqusShortName":"yoohoogun114","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"653631ae-93de-5943-8a1c-7eeb764a3b19","excerpt":"1. 개요 DevOps\n우리는 지금까지 Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (1) Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (2) Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (3)\n을 거쳐서 iOS, Android 모두 구성을 마쳤다. 이제 앞에서 진행했던 JS Test-> Native Test -> Beta Test Deploy…","html":"<h1 id=\"1-개요\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p><img src=\"https://i.ytimg.com/vi/Qp-BA9e0TnA/maxresdefault.jpg\" alt=\"DevOps\">\n우리는 지금까지</p>\n<ul>\n<li>Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (1)</li>\n<li>Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (2)</li>\n<li>Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (3)\n을 거쳐서 iOS, Android 모두 구성을 마쳤다. 이제 앞에서 진행했던 <strong>JS Test</strong>-> <strong>Native Test</strong> -> <strong>Beta Test Deploy</strong> 과정을 <strong>모두 자동화</strong>해보자.</li>\n</ul>\n<h1 id=\"2-packagejson에-script-추가하기\"><a href=\"#2-packagejson%EC%97%90-script-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"2 packagejson에 script 추가하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. package.json에 Script 추가하기</h1>\n<p><code class=\"language-text\">DevOpsForRN/package.json</code>에 <code class=\"language-text\">beta</code> script를 추가되어 있는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node node_modules/react-native/local-cli/cli.js start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"beta\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cd ios &amp;&amp; fastlane increase_build_number_and_push_to_beta\"</span> # 변경\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h1 id=\"3-fastlane-slack-notify-추가하기\"><a href=\"#3-fastlane-slack-notify-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"3 fastlane slack notify 추가하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Fastlane Slack Notify 추가하기</h1>\n<p>모든 작업이 완료되었을 때 <code class=\"language-text\">Slack</code>으로 <strong>Notification</strong>을 받기 위한 설정은 다음과 같다.\n<code class=\"language-text\">DevOpsForRN/ios/fastlane/Fastfile</code> 파일의 <code class=\"language-text\">beta lane</code> 에 <code class=\"language-text\">slack</code> 부분을 추가한다.\n<a href=\"http://seotory.tistory.com/24\">slack(슬랙), incoming webhooks 을 사용해보자. - seotory</a>의 블로그 아티클이 도움이 될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  lane :beta do\n    desc &quot;TesfFlight for IOS&quot;\n\t  ...\n    ...\n    slack(\n\t\tslack_url: &quot;https://hooks.slack.com/services/*******/********/******************&quot;\n\t    channel: &quot;dev&quot;,\n\t    message: &quot;Successfully uploaded a fastlane beta release&quot;\n    )\n    end\n    ...\t\t\nend</code></pre></div>\n<h1 id=\"4-작성한-내용-검증하기\"><a href=\"#4-%EC%9E%91%EC%84%B1%ED%95%9C-%EB%82%B4%EC%9A%A9-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0\" aria-label=\"4 작성한 내용 검증하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 작성한 내용 검증하기</h1>\n<p>위 설정이 올바르게 되어있으면 다음의 커맨드를 입력하였을 때 <strong>ios의 빌드 넘버를 변경</strong>하고 git의 <code class=\"language-text\">beta</code> branch에 변경내용을 <strong>push</strong>한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run deploy</code></pre></div>\n<p>우리가 설정한 <strong>테스트</strong> -> <strong>빌드</strong> -> <strong>베타</strong> 배포의 과정이 완료되었다면 다음과 같은 화면을 볼 수 있다.\n<img src=\"https://github.com/philographer/DevOpsForRN/blob/master/images/circleci-success.png?raw=true\" alt=\"CircleCI-Success\"></p>\n<h1 id=\"etc-s3-static-hosting으로-보여주기\"><a href=\"#etc-s3-static-hosting%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EC%97%AC%EC%A3%BC%EA%B8%B0\" aria-label=\"etc s3 static hosting으로 보여주기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC: S3 Static Hosting으로 보여주기</h1>\n<p><a href=\"https://github.com/rufuspollock/s3-bucket-listing\">s3-bucket-listing</a> 플러그인을 이용하면 S3 대시보드에 직접 접속하지 않아도 Static Website Hosting처럼 S3의 내용을 표시할 수 있다.\n<img src=\"https://github.com/philographer/DevOpsForRN/blob/master/images/static-hosting.png?raw=true\" alt=\"static-hosting\">\nDemo: <a href=\"http://devops-react-native.s3-website.ap-northeast-2.amazonaws.com/?prefix=apk/\">S3 Bucket Listing Generator</a></p>\n<h1 id=\"etc-build-error\"><a href=\"#etc-build-error\" aria-label=\"etc build error permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC: Build Error</h1>\n<p>혹시나 CircleCI에서 다음과 같은 에러로 빌드가 되지 않는 경우도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">bundle: Done writing bundle output\n:app:bundleReleaseJsAndAssets FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed <span class=\"token keyword\">for</span> task <span class=\"token string\">':app:bundleReleaseJsAndAssets'</span><span class=\"token builtin class-name\">.</span>\n<span class=\"token operator\">></span> Process <span class=\"token string\">'command '</span>node<span class=\"token string\">''</span> finished with non-zero <span class=\"token builtin class-name\">exit</span> value <span class=\"token number\">137</span></code></pre></div>\n<p><strong>해결방법:</strong> 이유는 모르겠지만 첫 번들링이 실행이 안되는 경우도 있는 것 같다. 해결방법은 첫 번들링을 로컬에서 실행해주고 remote로 올려서 CircleCI가 overwrite하게 하는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> android/app/src/main/assets\n$ react-native bundle --platform android --dev <span class=\"token boolean\">false</span> --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> --all\n$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">'Added bundle.android.js'</span>\n$ <span class=\"token function\">git</span> push origin master\n$ <span class=\"token function\">npm</span> run beta</code></pre></div>\n<p>Ref: <a href=\"https://github.com/facebook/react-native/issues/11696\">https://github.com/facebook/react-native/issues/11696</a></p>\n<h1 id=\"자동화된-과정들-정리\"><a href=\"#%EC%9E%90%EB%8F%99%ED%99%94%EB%90%9C-%EA%B3%BC%EC%A0%95%EB%93%A4-%EC%A0%95%EB%A6%AC\" aria-label=\"자동화된 과정들 정리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자동화된 과정들 정리</h1>\n<p><strong>React Naitve</strong>의 <strong>Beta Testing</strong>을 자동화 하기 위하여 지금까지 작성한 내용은 다음과 같다.</p>\n<ol>\n<li><code class=\"language-text\">$ npm run deploy</code> 커맨드를 입력한다 (Developer)</li>\n<li>IOS Project의 Build Number를 1 증가시킨다. (Fastlane local)</li>\n<li><code class=\"language-text\">Git</code>의 <code class=\"language-text\">beta</code> Branch에 코드를 push한다. (Fastlane local)</li>\n<li><code class=\"language-text\">Github</code>이 Webhook을 통해 <code class=\"language-text\">CircleCI</code>가 <code class=\"language-text\">beta</code> Branch에 코드가 커밋된 사실을 알아챈다. (Github)</li>\n<li><code class=\"language-text\">CircleCI</code>가 <code class=\"language-text\">beta</code> Branch에 대하여 JS Test -> ios, android 각각 빌드 -> Native 테스트 -> 배포의 과정을 실행한다. (CircleCI)</li>\n<li>ios의 경우 미리 지정한 사용자에게 <code class=\"language-text\">TestFlight</code>가 전송된다. (Fasltnae on CircleCI)</li>\n<li>Android의 경우 미리 지정한 <code class=\"language-text\">S3</code> Bucket에 Release APK가 업로드된다. (Fasltnae on CircleCI)</li>\n<li>Slack Message를 미리 지정한 채널에 전송한다. (Fasltnae on CircleCI)\n따라서 일련의 과정을 그려보면 다음과 동일하다.\n<img src=\"https://raw.githubusercontent.com/philographer/DevOpsForRN/master/images/ci-cd-flow-completed.png\" alt=\"flow-completed\"></li>\n</ol>\n<h1 id=\"데모-프로젝트\"><a href=\"#%EB%8D%B0%EB%AA%A8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"데모 프로젝트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데모 프로젝트</h1>\n<p>아래 Github에는 지금까지 적용했던 모든 사항들이 적용되어 있다. 혹시 세부적인 세팅이 궁금하다면 참조하자.\n<a href=\"https://github.com/philographer/DevOpsForRN\">https://github.com/philographer/DevOpsForRN</a></p>\n<h1 id=\"마무리하며\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0\" aria-label=\"마무리하며 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리하며</h1>\n<p>지금까지 <strong>FaceBook</strong>의 하이브리드 앱 프레임워크인 <strong>React Native</strong>의 <strong>CI/CD Flow</strong>를 구축해 보았다.</p>\n<p>이용자의 Needs가 점점 다양해지면서 비즈니스 또한 그 기대에 부응하기 위하여 발 빠르게 움직여야 하는 시대가 되었다. 이에 따라서 개발자들 또한 여러 가지 <strong>Unit/integration test, beta test, build</strong> 들을 자동화하지 않고는 고객들의 요구사항을 맞출 수 없는 상황에 이르렀다. 보다 품질이 보증되는 소프트웨어를 만들기 위한 노력은 소프트웨어 생태계가 발전하면서</p>\n<p>만약, 팀의 누군가 한 명이 자발적으로 이런 <strong>DevOps</strong>에 관심을 가지고 <strong>자동화</strong>를 한 번만 잘 적용해 놓는다면 팀 모두의 <strong>생산성</strong>과 <strong>코드의 품질</strong>을 높일 수 있다. 이제는 <strong>DevOps</strong>에 대하여 깊이 있게 알지 못하더라도, 여러 가지 좋은 <strong>서비스</strong>가 시장에 많이 나와 있으므로 작은 비용의 <strong>유료 Plan</strong>이나 <strong>Open Source</strong> 잘 조합하여 적용한다면 팀에게도 <strong>생산성</strong>과 <strong>코드 품질</strong>에 큰 도움이 되지 않을까 생각한다.</p>","frontmatter":{"title":"Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (4)","date":"February 15, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/development/circleci-rn4/","previous":{"fields":{"slug":"/development/circleci-rn3/"},"frontmatter":{"title":"Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (3)","categories":["DevOps"]}},"next":{"fields":{"slug":"/development/vscode-open-bash/"},"frontmatter":{"title":"Bash에서 Visual Studio Code 열기","categories":["tip"]}}}}}