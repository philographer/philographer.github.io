{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/circleci-rn1/","webpackCompilationHash":"681a4c413f2b345a37e8","result":{"data":{"site":{"siteMetadata":{"title":"Philographer.dev","author":"Philographer","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"yoohoogun114","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0f22b77c-91c3-518d-8a77-d0386f4d7ed4","excerpt":"1. 개요 DevOps 사내 프로젝트를 진행하면서 React Native 앱을 개발하게 되었는데, 앱이 점점 덩치가 커지더니 코드 라인 수가 몇만 라인을 돌파할 즈음 CI/CD 프로세스 없이는 도저히 프로젝트 진행이 불가능하다고 느껴졌다. -(너무 늦게 도입했다는 생각이..)-\n예를 들자면 다음의 경우에 개발자의 Context Switching…","html":"<h1 id=\"1-개요\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h1>\n<p><img src=\"https://sdtimes.com/wp-content/uploads/2017/05/screen_shot_2017-05-25_at_12.16.16_pm.png\" alt=\"DevOps\"></p>\n<blockquote>\n<p>사내 프로젝트를 진행하면서 <a href=\"https://facebook.github.io/react-native/\">React Native</a> 앱을 개발하게 되었는데, 앱이 점점 덩치가 커지더니 코드 라인 수가 몇만 라인을 돌파할 즈음 <strong>CI/CD</strong> 프로세스 없이는 도저히 프로젝트 진행이 불가능하다고 느껴졌다. -(너무 늦게 도입했다는 생각이..)-\n예를 들자면 다음의 경우에 개발자의 <strong>Context Switching</strong>이 많이 일어나고 <strong>개발자의 생산성</strong>이 떨어지는 문제가 있었다.</p>\n</blockquote>\n<ol>\n<li>클라이언트가 <strong>“중간 배포 버전을 보고 싶다”</strong> 라고 하면 중간 배포 버전을 만들기 위해 Production Build를 하고, 배포 서버에 APK를 올리거나 TestFlight에 업로드 해야할 경우 코딩을 진행할 수 없음.</li>\n<li><strong>라이브러리가 업데이트</strong> 되었을 때 build가 깨질 경우 어느 라이브러리가 문제인지 디버그해야 함.</li>\n<li>코드를 수정했는데, 메인 페이지가 <strong>rendering</strong>이 제대로 되지 않을 경우 앱 내로 진입할 수 없음. 디버그해야 함.</li>\n<li>최종 수정 버전을 <strong>Android Play Store</strong>, <strong>IOS APP Store</strong>에 업로드 해야하는 경우, 코딩을 할 수 없음.</li>\n<li>Reat Native의 경우 IOS, Android Project가 각각 나오기 때문에, 테스트를 따로 진행해야 함.</li>\n</ol>\n<p>위의 문제들은 모두 <strong>CI(Continuous Integration)</strong>, <strong>CD(Continuous Deploy)</strong> Process를 잘 정립하면 해결되는 문제라고 판단하고 다음의 Flow를 설계해보았다.</p>\n<h1 id=\"2-what-to-make\"><a href=\"#2-what-to-make\" aria-label=\"2 what to make permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. What to Make</h1>\n<p><img src=\"https://raw.githubusercontent.com/philographer/DevOpsForRN/master/images/ci-cd-flow.png\" alt=\"flow\">\n따라서 결론적으로 만들고 싶은 프로세스는 다음과 같았다.</p>\n<ol>\n<li>개발자가 각 용도에 맞는 branch에 코드를 커밋한다</li>\n<li>Github은 web hook을 이용하여 CI/CD Tool에 이를 알린다.</li>\n<li>CI/CD 툴은 Android, IOS를 각각 테스트하며 테스트 배포앱을 결과물로 제공한다</li>\n<li>Slack에는 테스트 결과, 테스트 배포 앱 링크를 제공한다.</li>\n</ol>\n<p>이러한 flow에 알맞는 CI / CD, Automation 기술 스택들을 선정하기 위해 여러 가지 후보군을 선정해 보았다.</p>\n<h1 id=\"3-jenkins-vs-travis-vs-circleci\"><a href=\"#3-jenkins-vs-travis-vs-circleci\" aria-label=\"3 jenkins vs travis vs circleci permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Jenkins Vs Travis Vs CircleCI</h1>\n<p><img src=\"https://github.com/philographer/DevOpsForRN/blob/master/images/circle_vs_others.png?raw=true\" alt=\"circle_vs_others\"></p>\n<p>초창기에는 이전에 사용해 보았던 <a href=\"https://jenkins.io/\">Jenkins</a>를 고려하였으나 <strong>자체 보유하고 있는 서버</strong>에 올리거나 <strong>클라우드</strong>에 올려야 하기 때문에 <strong>서버 관리 비용(돈+노력)</strong>이 필요하고 <strong>Jenkins</strong>의 <strong>복잡한 Configuration</strong> 때문에 생기는 <strong>높은 Learning Curved</strong>가 필요하며 결정적인 이유로 <strong>MacOS</strong>에서 <strong>Xcode Build</strong>를 해야하기 때문에 <strong>MacOS</strong>가 필요하는 등 여러가지 이유로 선택지에서 제외하였다.</p>\n<p>그다음 선택지는 <strong>Travis</strong> 였는데 <strong>CircleCI</strong> 와 많은 고민을 거쳤다. 사실 두 가지 모두 성숙한 서비스이기 때문에 무엇을 선택해도 크게 다르지 않다는 생각을 가지고 있었다. 따라서 이미 사용해봤던 <strong>Travis</strong>를 도입하려던 찰나 <strong>FaceBook의 React Native</strong> 프로젝트인 <a href=\"https://circleci.com/gh/facebook/react-native\">facebook/react-native</a> 는 <strong>어떤 CI Tool을 사용하고 있나 궁금해졌다.</strong> 확인해 본 결과 FaceBook이 사용하고 있는 Tool은 <strong>CircleCI</strong> 였다.\n그렇다면 왜 <strong>CircleCI</strong>를 사용했을까? <strong>React Naitve</strong>의 프로젝트 커밋 히스토리를 찾아보니 이전에는 <strong>Travis</strong>와 <strong>CircleCI</strong>를 둘다 사용했었고,  점차 <strong>Travis</strong> -> <strong>CircleCI</strong>로 Migration하는 커밋들이 늘어났다. 이유는 <strong>빌드 속도</strong> 때문으로 보인다.\nCI Tool들은 직접 컨택을 하지 않는 이상 과금이 총 빌드 시간과 관련이 있다. 따라서 빌드시간이 적으면 적을수록 과금 정책이 싼 plan을 선택할 수 있기 때문에 <strong>빌드 속도, 시간</strong>은 무척 중요하다. -물론 개발자가 오랜 빌드를 기다리기 싫은 이유도 있고-</p>\n<p>관련 커밋:  <a href=\"https://github.com/facebook/react-native/pull/16354\">Migrate Travis over to Circle by grabbou · Pull Request #16354 · facebook/react-native · GitHub</a></p>\n<h1 id=\"4-cicd-tool-로서의-선택-circleci\"><a href=\"#4-cicd-tool-%EB%A1%9C%EC%84%9C%EC%9D%98-%EC%84%A0%ED%83%9D-circleci\" aria-label=\"4 cicd tool 로서의 선택 circleci permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. CI/CD Tool 로서의 선택: CircleCI</h1>\n<p><img src=\"https://github.com/philographer/DevOpsForRN/blob/master/images/circle.png?raw=true\" alt=\"circle\">\n따라서 우리도 <strong>React Native</strong>의 프로젝트처럼 과거의 문제를 답습하지 않기 위하여 히스토리를 뒤져보다가 <strong>CircieCI</strong>를 선택하였고 <a href=\"https://circleci.com/docs/2.0/\">2.0 Docs - CircleCI</a>부터 차례대로 진행하였다. 프로젝트를 진행하였을 때는 <strong>MacOS</strong>가 <strong>CircleCI 1.0</strong>만 가능했었는데 <strong>2018년 1월</strong>부터 <strong>CircleCI 2.0</strong>도 지원하기 때문에 아티클을 쓰는 겸사겸사 아래에서 1.0 -> 2.0 Migration을 진행해보기로 한다. </p>\n<h1 id=\"5-fastlane-vs-appium-vs-bitrise\"><a href=\"#5-fastlane-vs-appium-vs-bitrise\" aria-label=\"5 fastlane vs appium vs bitrise permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Fastlane Vs Appium VS Bitrise</h1>\n<p><img src=\"https://github.com/philographer/DevOpsForRN/blob/master/images/fastlane_vs_others.png?raw=true\" alt=\"fastlane_vs_others\">\n사실 세 가지 툴들은 동일한 카테고리에 있는 경쟁대상은 아니다.\n<a href=\"https://fastlane.tools/\">Fastlane</a>은 <strong>App Automation</strong> Tool을 담당하는 오픈소스이고 무료\n<a href=\"http://appium.io/\">Appium</a>은 <strong>App Test</strong>의 목적으로 사용은 오픈소스이며 무료\n<a href=\"http://bitrise.io/\">Bitrise</a>은 <strong>CI/CD Tool</strong> 서비스이며 유료</p>\n<p>우리가 만들려고 하는 CI/CD Architecture에서 위의 3가지 툴들에게 기대하는 근본적인 역할은 다음 세 가지다.</p>\n<ol>\n<li>기능이 풍부하고 쉬우며 <strong>관리</strong>를 줄일 수 있는 좋은 툴이라면 얼마든지 비용을 지급할 수 있다. 다만 많은 기능을 쓰지 않는다면 <strong>스타트업</strong>은 비싼 플랜이나, <strong>정기적인 과금</strong>을 지출하기에는 까다로움이 있다. 따라서 웬만하면 <strong>무료</strong>여야 한다. -> <strong>Fastlane</strong>, <strong>Appium</strong></li>\n<li><strong>CI</strong> 위에서 테스트와 배포에 도움을 주어야 한다. -> <strong>Fastlane</strong>, <strong>Appium</strong>, <strong>Bitrise</strong>(자체 CI Tool)</li>\n<li>생태계가 성숙 돼 있고 건강하며, 활성화가 아직도 진행 중어야 한다. 이는 곧 레퍼런스가 풍부함을 의미한다. -> <strong>Fastlane</strong> (Star 수가 가장 많고, 검색결과가 많음)</li>\n</ol>\n<p>세가지 모두가 비교대상인  <code class=\"language-text\">대체재</code> 라기보다는, 어느정도의 역할을 상대방이 보완해 줄 수 있는 <code class=\"language-text\">보완재</code>의 성격을 가지고 있다. <strong>Bitrise</strong> 같은 경우에는 <strong>Fastlane</strong> 과 궁합이 좋다는 외국 커뮤니티의 글이나 <strong>fastlane</strong> 진영에 글들이 많아서 잠깐 고려하기도 했으나 <strong>CircleCI</strong>가 <strong>Bitrise</strong>를 대체할 수 있으니, 이미 <strong>CircleCI</strong>를 선택하려고 마음을 먹었다면 1,2,3번의 조건을 모두 만족하는 <strong>Fastlane</strong> 진영으로 마음을 굳혔다.</p>\n<blockquote>\n<p>Britise는 <code class=\"language-text\">Mobile</code>을 타겟으로 나온 서비스이기 때문에 <strong>CircleCI</strong> 보다는 목적이 더 명확하다고 할 수 있다. 하지만 우리 팀은 앱만 만드는 것이 아니기 때문에 보다 범용적인 CI Tool인 <strong>CircleCI</strong>, <strong>Fastlane</strong>를 선택하지만 <code class=\"language-text\">Mobile first</code> 전략을 취하고 있는 스타트업이라면 <strong>Bitrise</strong>도 충분히 고려할 만하다.</p>\n</blockquote>\n<h1 id=\"6-automation-tool-로서의-선택-fastlane\"><a href=\"#6-automation-tool-%EB%A1%9C%EC%84%9C%EC%9D%98-%EC%84%A0%ED%83%9D-fastlane\" aria-label=\"6 automation tool 로서의 선택 fastlane permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Automation Tool 로서의 선택: Fastlane</h1>\n<p><img src=\"https://github.com/philographer/DevOpsForRN/blob/master/images/fastlane.png?raw=true\" alt=\"fastlane\">\n<a href=\"https://fastlane.tools/\">fastlane</a>이란 툴은 Application의 Automation에 필요한 기능을 담고 있는 툴이다. 예를 들자면, <code class=\"language-text\">$ fastlane beta</code> 라는 명령어를 친면</p>\n<ol>\n<li>Build Number를 증가시키고</li>\n<li>앱을 빌드하고</li>\n<li>TestFlight에 업로드하고</li>\n<li>Slack에 메시지를 보낸다.</li>\n</ol>\n<p>이런 일련의 과정들을 간단한 CLI 명령어 한줄로 대신 수행해주며 아래와 같은 간단한 <code class=\"language-text\">ruby</code> 문법으로 행동을 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">lane <span class=\"token symbol\">:beta</span> <span class=\"token keyword\">do</span>\n\tincrement_build_number\n\tbuild_app\n\tupload_to_testflight\n\tslack\n<span class=\"token keyword\">end</span></code></pre></div>\n<h1 id=\"next\"><a href=\"#next\" aria-label=\"next permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next</h1>\n<ul>\n<li><a href=\"https://philographer.github.io/2018/02/15/circleci-rn2/\">Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (2)</a></li>\n<li><a href=\"https://philographer.github.io/2018/02/15/circleci-rn3/\">Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (3)</a></li>\n<li><a href=\"https://philographer.github.io/2018/02/15/circleci-rn4/\">Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (4)</a></li>\n</ul>","frontmatter":{"title":"Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (1)","date":"February 15, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/development/circleci-rn1/","previous":{"fields":{"slug":"/development/ausg-seminar/"},"frontmatter":{"title":"초보자를 위한 AWS 뿌시기 AUSG 세미나 후기","categories":["Conference","Dev"]}},"next":{"fields":{"slug":"/development/circleci-rn2/"},"frontmatter":{"title":"Fastlane, CircleCI를 이용하여 React Native DevOps 도입기 (2)","categories":["DevOps"]}}}}}