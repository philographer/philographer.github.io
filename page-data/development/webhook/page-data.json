{"componentChunkName":"component---src-templates-blog-post-js","path":"/development/webhook/","webpackCompilationHash":"681a4c413f2b345a37e8","result":{"data":{"site":{"siteMetadata":{"title":"Philographer.dev","author":"Philographer","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"yoohoogun114","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"e5a77259-25d5-54c4-9e10-d352f23c07f6","excerpt":"개요 프로젝트를 진행하면서 빠르게  서버를 배포해야 할 일들이 많다.\n예를 들자면 해커톤에 참여할 때라던지, 당장 나의 를 클라이언트 프로그래머가 사용해야 할 경우가 종종 있다.\nAPI 서버를 테스트로 배포할 때는 주로 다음의 과정을 거친다. localhost에서 작업을 하고 Postman를 테스트를 거친다 Github Repository에 Push한다 현재 돌고있는 코드를 stop 한다. 서버(AWS, 물리)에 접속하여 Git pull을 받는다. 다시 코드를 start…","html":"<h1 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>프로젝트를 진행하면서 빠르게 <code class=\"language-text\">api</code> 서버를 배포해야 할 일들이 많다.\n예를 들자면 해커톤에 참여할 때라던지, 당장 나의 <code class=\"language-text\">api</code>를 클라이언트 프로그래머가 사용해야 할 경우가 종종 있다.\nAPI 서버를 테스트로 배포할 때는 주로 다음의 과정을 거친다.</p>\n<ol>\n<li>localhost에서 작업을 하고 Postman를 테스트를 거친다</li>\n<li>Github Repository에 Push한다</li>\n<li>현재 돌고있는 코드를 stop 한다.</li>\n<li>서버(AWS, 물리)에 접속하여 Git pull을 받는다.</li>\n<li>다시 코드를 start 한다.</li>\n</ol>\n<p>상당히 번거로운 작업이 아닐 수 없다. 그래서 나는 이런 경우 주로  <code class=\"language-text\">ec2</code>에 git을 설치하고, 서버에 직접 repository를 만든 다음 ec2의 repo push하면 post receive hook을 사용하여 빠른 배포를 진행했다. 다음의 링크와 같은 방법이다. <a href=\"http://cuppster.com/2011/05/12/diy-node-js-server-on-amazon-ec2/\">DIY node.js server on Amazon EC2</a></p>\n<p>하지만 이런 방법에는 큰 단점이 있다. 바로 server에 git을 직접 bare로 설치하는 방법이기 때문에 나중에 github으로 프로젝트를 관리하기 어려워진다는 점이다. 최근 AWS직원분들과 이야기를 나눌 기회가 있었는데  <code class=\"language-text\">Github Webhook</code>에 대해서 말씀해 주셔서 알아보게 되었다.</p>\n<p>여담으로, 처음에 “어떻게 빠른 배포를 진행할까?”에 대해서 생각하면서 <code class=\"language-text\">Jenkins</code>, <code class=\"language-text\">Travis</code>같은 빌드툴을 이용하고 그 다음 자동 배포 로직을 돌리면 어떨까 생각했는데 생각보다 빌드툴을 셋팅하기도 오래 걸렸기 때문에 간단한 테스트에는 적합하지 않았다.  <code class=\"language-text\">AWS Code Deploy</code>에서 테스트 프로젝트를 돌려보니 <code class=\"language-text\">Blue Green</code> 배포 방식이고 router를 재연결하는 방식이기 때문에 코드가 빨리 배포되지는 않아서 매우 짜증이 났다.\n그래서 결국에 제일 간단한 방법인 <code class=\"language-text\">Github Webhook</code>을 선택하였다.</p>\n<br/>\n# Webhook 이란?\n<br/>\n![arrhook](./webhook/arrhook.gif)\n`Webhook`에 대해 알아보기 전에 우선 `hook`이 무엇인지 알아보자면,\n`hook`이란 각종 소프트웨어 구성요소 간에 발생하는 함수 호출, 메시지, 이벤트를 중간에서 가로채는 행위를 말한다.\n`Webhook`은 [Webhooks | GitHub Developer Guide](https://developer.github.com/webhooks/)에 매우 잘 나와 있고, 링크를 요약하자면 git repository에 이벤트가 발생했을 때 이를 미리 설정한 URL에 HTTP POST  Method로 보내주는 것을 말한다. 주로 이슈 트래커, CI Build, Update Backup Mirror, deploy에서 사용한다고 한다. 이 글에서는 `deploy`관점에서 `webhook`을 적용한다.\n<br/>\n<h1 id=\"prerequisite\"><a href=\"#prerequisite\" aria-label=\"prerequisite permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisite</h1>\n<ol>\n<li>Apt-get upgrade</li>\n<li>Apt-get update</li>\n<li>Install Node.js <a href=\"https://nodejs.org/ko/download/package-manager/#debian-ubuntu-linux\">Debian-ubuntu-Node.js | Node.js</a></li>\n<li>Install Pm2 <a href=\"https://github.com/Unitech/pm2\">pm2: Production process manager for Node.js</a></li>\n<li>Install Nginx <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04\">How To Install Nginx on Ubuntu 16.04 | DigitalOcean</a> or <a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/install/#official-debian-ubuntu-packages\">Nginx Install</a>\n<br/></li>\n</ol>\n<h1 id=\"1-ssh-key-setting-on-server\"><a href=\"#1-ssh-key-setting-on-server\" aria-label=\"1 ssh key setting on server permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Ssh key Setting (On Server)</h1>\n<ol>\n<li>서버에서 <a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key\">Generating a new SSH key and adding it to the ssh-agent</a>를 참조하여 ssh 키를 만든다.</li>\n<li>다음링크에서 만들었던 서버의 공개 키를 등록한다. (기본값으로 설정했다면 vi ~/.ssh/id_rsa.pub 에서 볼 수 있다.) <a href=\"https://github.com/settings/ssh\">https://github.com/settings/ssh</a></li>\n<li>공개키(id<em>rsa.pub)에 있는 내용을 서버의 ~/.ssh/authorized</em>keys 파일의 끝에 copy and paste한다.\n<br/></li>\n</ol>\n<h1 id=\"2-github-repository-setting\"><a href=\"#2-github-repository-setting\" aria-label=\"2 github repository setting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Github Repository Setting</h1>\n<br/>\n![Github Setting](./webhook/setting.png)\n우선 Github의 Repository에서 Settings 탭을 보면 Add Webhook 버튼이 있다.\n친절히 [가이드](https://developer.github.com/webhooks/)도 적혀있으니 시간이 있다면 참조해보자.\n<br/>\n<h1 id=\"3-secret-setting\"><a href=\"#3-secret-setting\" aria-label=\"3 secret setting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Secret Setting</h1>\n<br/>\nAdd Webhook을 누르면 다음과 같은 화면을 볼 수 있다.\n![SecretSetting](./webhook/webhook.png)\n<ol>\n<li>Payload URL에는 원하는 도메인의 Post Request가 날아갈 EndPoint를 적어준다. 내 경우는 추후에 NGINX Proxy를 이용해서 /hook 로 날린 요청을 받기 때문에 저렇게 설정했다.</li>\n<li>Content type은 json이나 form을 선택할 수 있다. 필자는 node에서 json으로 처리하는게 편하기 때문에 json을 선택했다.</li>\n<li>Secret은 보안상 필요한 부분이다. 생략해도 되지만 설정하기를 권장한다. 자신이 원하는 값을 적으면 된다.</li>\n</ol>\n<p>Secret을 생략할 수 있지만 사실 매우 중요한 부분이다. SECRET을 설정하지 않는다면 서버에서는 어떤 Post Request에도 Shell Script나 커맨드 또는 Logic을 무조건 실행하므로 보안상 배우 취약할 수 있다.\n<br/></p>\n<h1 id=\"4-nginx-setting\"><a href=\"#4-nginx-setting\" aria-label=\"4 nginx setting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. NGINX Setting</h1>\n<p>Nginx 설정을 진행한다.\n<code class=\"language-text\">$ vi /etc/nginx/sites-available/default</code></p>\n<script src=\"https://gist.github.com/yoohoogun114/17fcf2aadc048447544e84a200f9b1bf.js\"></script>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">location <span class=\"token operator\">/</span>hook <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 이 부분이 포인트</span>\n                proxy_pass http<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token regex\">/127.0.0.1:3100/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//3100 포트로 proxy</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>설정 파일을 잠깐 살펴보면 /hook 으로 endpoint에 접속하면 3100번 포트로 proxy한다.\n<br/></p>\n<h1 id=\"5-hook-script\"><a href=\"#5-hook-script\" aria-label=\"5 hook script permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Hook Script</h1>\n<p>Github에 Push되었을 때 실행될 스크립트를 작성한다\n<code class=\"language-text\">$ mkdir ~/hook</code>\n<code class=\"language-text\">$ vi ~/hook/hook.sh</code></p>\n<script src=\"https://gist.github.com/yoohoogun114/f20e95eb38c7ab4f7982037d5deef84c.js\"></script>\n<ol>\n<li>futsal-node라고 적혀진 부분을 자신의 node server 디렉토리로 바꾼다.</li>\n<li>futsal이라고 적혀진 부분을 추후 pm2 에서 실행할 이름으로 미리 정해둔다.</li>\n</ol>\n<p>코드를 설명하자면 Github Repository에 코드가 Push되었을때, 서버 디렉토리로 이동 후 Code를  Pull 받은 다음  pm2로 실행중인 기존의 서버를 재시작한다는 내용이다.</p>\n<p>그 다음으로 Hook 폴더 내에서  <code class=\"language-text\">$ npm init</code>을 한 후, start script를 작성한다. 추후에 pm2에 의해 nom start script가 실행된다.\n<code class=\"language-text\">$ vi ~/hook/package.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hook\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0.0\"</span>,\n  <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"main\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hook.js\"</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span>,\n    <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"nodejs ./hook.js\"</span>\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"author\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,\n  <span class=\"token string\">\"license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ISC\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h1 id=\"6-nodejs-server-script\"><a href=\"#6-nodejs-server-script\" aria-label=\"6 nodejs server script permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Node.js Server Script</h1>\n<p>Github에 Push 되었을때 이를 인지할 수 있는 작은 서버스크립트가 필요하다.\n<code class=\"language-text\">$ vi ~/hook/hook.js</code></p>\n<script src=\"https://gist.github.com/yoohoogun114/a0730fa7f706391ba6dbadda70f302c1.js\"></script>\n<p>코드를 설명하자면 Post Request가 왔을 때 클라이언트가 헤더에 x-hub-signature 값을 보내주는데, 이 값을 Server가 가지고 있는 토큰을 기반으로 Body를 암호화한 값과 같은지 보고 맞다면 아까 만들어둔 hook.sh를 실행한다는 내용이다.</p>\n<p>여기서 중요한 점은 보안상의 이유로 위에서 진행했던 Secret Setting에 설정했던 키와 똑같은 키를 하드코딩된 변수가 아닌 환경변수(process.env[‘SCRET_TOKEN’]) 에서 불러와서 쓴다는 점이다.</p>\n<p>SCRET<em>TOKEN 환경변수는 다음과 같이 설정한다.\n`$ echo export SECRET</em>TOKEN=아까설정했던Secret >> ~/.bash_profile `\n<br/></p>\n<h1 id=\"7-pm2-setting\"><a href=\"#7-pm2-setting\" aria-label=\"7 pm2 setting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Pm2 Setting</h1>\n<p><code class=\"language-text\">$ pm2 start npm --name=&quot;hook&quot; -- start</code>\n이제 Background에서 Node.js 서버가 돌고있으면서 Post Request가 오기를 기다리고 있다.\n\nGithub Repo에 Push를 하면 Github이 우리 서버 URL(~~~/hook) 로 Post Request를 날리고, Nginx에서 이것을 3100 port로 proxy한다. 그러면 우리의 hook.js 서버에 도달하고 만약 SECRET이 일치한다면 hook.sh를 실행하고 불일치하면 실행하지 않는다.</p>\n<ul>\n<li>\n<p>npm start 커맨드를  pm2에서는 다음과 같이 실행한다.</p>\n<ul>\n<li>pm2 start npm —name “{app<em>name}” — run {script</em>name}</li>\n<li>(run is optional)\n<br/></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"마치면서\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B4%EC%84%9C\" aria-label=\"마치면서 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치면서</h1>\n<p>빠르게 배포하기 위해서 Github Webhook에 대해서 알아봤다. Bash Script, SSH, PM2, Node.js 에 대해서 미리 어느 정도 알고 있다면 그렇게 어렵지는 않을 것이다. 까먹지 않고 있으면 빠른 배포가 필요한 상황에서 매우 유용할 것 같다.\n<br/></p>\n<h1 id=\"참고자료\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h1>\n<ol>\n<li><a href=\"https://gist.github.com/oodavid/1809044\">Deploy your site with git · GitHub</a> </li>\n</ol>","frontmatter":{"title":"Github Webhook","date":"February 16, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/development/webhook/","previous":{"fields":{"slug":"/development/4th-unithon/"},"frontmatter":{"title":"4회 Unithon 후기","categories":["Retrospect","Competition"]}},"next":{"fields":{"slug":"/development/absence/"},"frontmatter":{"title":"휴학 회고 (2016.08-2017.08)","categories":["Retrospect","Personal"]}}}}}